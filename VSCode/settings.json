// 将设置放入此文件中以覆盖默认设置
{

// 编辑器(26/59)

  // 当其前缀匹配时插入代码段。当 "quickSuggestions" 未启用时，效果最佳。
  // "editor.tabCompletion": false,

  // 控制字体系列。
  // "editor.fontFamily": "Consolas, 思源黑体",
  // "editor.fontFamily": "Consolas, Microsoft YaHei",
  "editor.fontFamily": "Source Code Pro, 思源黑体",
  // "editor.fontFamily": "Source Code Pro, Microsoft YaHei",
  // "editor.fontFamily": "DejaVu Sans Mono, 思源黑体",
  // "editor.fontFamily": "DejaVu Sans Mono, Microsoft YaHei",
  // "editor.fontFamily": "Inconsolata, 思源黑体",
  // "editor.fontFamily": "Inconsolata, Microsoft YaHei",
  // "editor.fontFamily": "Monaco, 思源黑体",
  // "editor.fontFamily": "Monaco, Microsoft YaHei",
  // "editor.fontFamily": "Inziu Iosevka SC",

  // 以像素为单位控制字号。
  "editor.fontSize": 16,

  // 以像素为单位控制字符间距。
  // "editor.letterSpacing": 0,

  // 控制行号的显示。可能的值为“开”、“关”和“相对”。“相对”将显示从当前光标位置开始计数的行数。
  // "editor.lineNumbers": "on",

  // 一个制表符等于的空格数。该设置在 `editor.detectIndentation` 启用时根据文件内容进行重写。
  // "editor.tabSize": 4,

  // 按 "Tab" 时插入空格。该设置在 `editor.detectIndentation` 启用时根据文件内容进行重写。
  // "editor.insertSpaces": true,

  // 当打开文件时，将基于文件内容检测 "editor.tabSize" 和 "editor.insertSpaces"。
  // "editor.detectIndentation": true,

  // 控制编辑器是否在滚动时使用动画
  "editor.smoothScrolling": true,

  // 控制是否显示 minimap
  // "editor.minimap.enabled": true,

  // 控制是否自动隐藏迷你地图滑块。 
  "editor.minimap.showSlider": "always",

  // 呈现某行上的实际字符(与颜色块相反)
  "editor.minimap.renderCharacters": false,

  // 控制折行方式。可以选择： - “off” （禁用折行）， - “on” （视区折行）， - “wordWrapColumn”（在“editor.wordWrapColumn”处折行）或 - “bounded”（在视区与“editor.wordWrapColumn”两者的较小者处折行）。
  // "editor.wordWrap": "off",

  // 用鼠标添加多个光标时使用的修改键。“ctrlCmd”映射为“Control”（Windows 和 Linux）或“Command”（OSX）。“转到定义”和“打开链接”功能的鼠标手势将会相应调整，不与多光标修改键冲突。
  // "editor.multiCursorModifier": "alt",

  // 控制键入时是否应自动显示建议
  "editor.quickSuggestions": {
    "other": true,
    "comments": true,
    "strings": false
  },

  // 控制编辑器是否应在键入后自动设置行的格式
  // "editor.formatOnType": false,

  // 控制编辑器是否应自动设置粘贴内容的格式。格式化程序必须可用并且能设置文档中某一范围的格式。
  // "editor.formatOnPaste": false,

  // 通过使用鼠标滚轮同时按住 Ctrl 可缩放编辑器的字体
  "editor.mouseWheelZoom": true,

  // 控制编辑器中呈现空白字符的方式，可能为“无”、“边界”和“全部”。“边界”选项不会在单词之间呈现单空格。
  "editor.renderWhitespace": "boundary",

  // 控制编辑器是否应呈现控制字符
  "editor.renderControlCharacters": true,

  // 控制编辑器是否应呈现缩进参考线
  // "editor.renderIndentGuides": true,

  // 控制编辑器应如何呈现当前行突出显示，可能为“无”、“装订线”、“线”和“全部”。
  "editor.renderLineHighlight": "all",

  // 控制是否自动隐藏导航线上的折叠控件。
  "editor.showFoldingControls": "always",

  // 在制表位后插入和删除空格
  // "editor.useTabStops": true,

  // 删除尾随自动插入的空格
  // "editor.trimAutoWhitespace": true,

  // 即使在双击编辑器内容或按 Esc 键时，也要保持速览编辑器的打开状态。
  // "editor.stablePeek": false,

  // 控制编辑器是否应该允许通过拖放移动所选项。
  // "editor.dragAndDrop": true,

  // 控制 Diff 编辑器以并排或内联形式显示差异
  "diffEditor.renderSideBySide": false,

  // 控制差异编辑器是否将对前导空格或尾随空格的更改显示为差异
  "diffEditor.ignoreTrimWhitespace": false,

  // 控制差异编辑器是否为已添加/删除的更改显示 +/- 指示符号
  // "diffEditor.renderIndicators": true,

  // 保存时设置文件的格式。格式化程序必须可用，不能自动保存文件，并且不能关闭编辑器。
  // "editor.formatOnSave": false,

// 源代码管理(0/2)

// 工作台(7/22)

  // 控制是否在再次打开命令面板时恢复上一次的输入内容。
  "workbench.commandPalette.preserveInput": true,

  // 控制文件被其他某些进程删除或重命名时是否应该自动关闭显示文件的编辑器。禁用此项会保持编辑器作为此类事件的脏文件打开。请注意，从应用程序内部进行删除操作会始终关闭编辑器，并且脏文件始终不会关闭以保存数据。
  "workbench.editor.closeOnFileDelete": false,

  // 控制编辑器选项卡的大小。若设置为 "fit"，选项卡将总是足够大，能够完全显示编辑器标签。若设置为 "shrink"，将在不能一次全部显示所有选项卡时，允许选项卡缩小。
  "workbench.editor.tabSizing": "shrink",

  // 控制 Quick Open 是否应在失去焦点时自动关闭。
  "workbench.quickOpen.closeOnFocusLost": false,

  // 控制边栏的位置。它可显示在工作台的左侧或右侧。
  "workbench.sideBar.location": "right",

  // 指定用在工作台中的颜色主题。
  "workbench.colorTheme": "Default Light+",

  // 指定用在工作台中的图标主题。
  "workbench.iconTheme": "vscode-icons",

  // 控制工作台中的树控件是否支持水平滚动。
  "workbench.tree.horizontalScrolling": true,

// 窗口(5/11)

  // 控制是否应在新窗口中打开文件。
  // - default: 文件将在该文件的文件夹打开的窗口中打开，或在上一个活动窗口中打开，除非该文件通过平台或从查找程序(仅限 macOS)打开
  // - on: 文件将在新窗口中打开
  // - off: 文件将在该文件的文件夹打开的窗口中打开，或在上一个活动窗口中打开
  // 注意，可能仍会存在忽略此设置的情况(例如当使用 -new-window 或 -reuse-window 命令行选项时)。
  // "window.openFilesInNewWindow": "off",

  // 控制文件夹应在新窗口中打开还是替换上一活动窗口。
  // - default: 文件夹将在新窗口中打开，除非文件是从应用程序内选取的(例如通过“文件”菜单)
  // - on: 文件夹将在新窗口中打开
  // - off: 文件夹将替换上一活动窗口
  // 注意，可能仍会存在忽略此设置的情况(例如当使用 -new-window 或 -reuse-window 命令行选项时)。
  // "window.openFoldersInNewWindow": "default",

  // 控制重启后重新打开窗口的方式。选择“none”则永远在启动时打开一个空窗口；选择“one”则重新打开最后使用的窗口；选择“folders”则重新打开所有你曾打开的文件夹；或选择“all”则重新打开上次会话的所有窗口。
  "window.restoreWindows": "all",

  // 根据活动编辑器控制窗口标题。变量基于上下文进行替换:
  // ${activeEditorShort}: 文件名 (如 myFile.txt)
  // ${activeEditorMedium}: 相对于工作区文件夹的文件路径 (如 myFolder/myFile.txt)
  // ${activeEditorLong}: 文件的完整路径 (如 /Users/Development/myProject/myFolder/myFile.txt)
  // ${folderName}: 文件所在工作区文件夹名称 (如 myFolder)
  // ${folderPath}: 文件所在工作区文件夹路径 (如 /Users/Development/myFolder)
  // ${rootName}: 工作区名称 (如 myFolder 或 myWorkspace)
  // ${rootPath}: 工作区路径 (如 /Users/Development/myWorkspace)
  // ${appName}: 如 VS Code
  // ${dirty}: 活动编辑器有更新时显示的更新指示器
  // ${separator}: 仅在被有值变量包围时显示的分隔符 (" - ")
  "window.title": "${rootName}${separator}${activeEditorLong}${dirty}",

  // 控制菜单栏的可见性。“切换”设置表示隐藏菜单栏，按一次 Alt 键则将显示此菜单栏。默认情况下，除非窗口为全屏，否则菜单栏可见。
  "window.menuBarVisibility": "toggle",

// Zen 模式(5/5)

  // 控制打开 Zen Mode 是否也会将工作台置于全屏模式。
  // "zenMode.fullScreen": true,

  // 控制打开 Zen 模式是否也会隐藏工作台选项卡。
  "zenMode.hideTabs": false,

  // 控制打开 Zen 模式是否也会隐藏工作台底部的状态栏。
  "zenMode.hideStatusBar": false,

  // 控制打开 Zen 模式是否也会隐藏工作台左侧的活动栏。
  "zenMode.hideActivityBar": false,

  // 控制如果某窗口已退出 zen 模式，是否应还原到 zen 模式。
  // "zenMode.restore": false,

// 文件(11/14)

  // 配置 glob 模式以在搜索中排除文件和文件夹。例如，文件资源管理器根据此设置决定文件或文件夹的显示和隐藏。
  // "files.exclude": {
  //   "**/.git": true,
  //   "**/.svn": true,
  //   "**/.hg": true,
  //   "**/CVS": true,
  //   "**/.DS_Store": true
  // },

  // 配置语言的文件关联(如: "*.extension": "html")。这些关联的优先级高于已安装语言的默认关联。
  // "files.associations": {},

  // 读取和编写文件时使用的默认字符集编码。也可以根据语言配置此设置。
  // "files.encoding": "utf8",

  // 如果启用，会在打开文件时尝试猜测字符集编码。也可以根据语言配置此设置。
  "files.autoGuessEncoding": true,

  // 默认行尾字符。使用 \n 表示 LF，\r\n 表示 CRLF。
  "files.eol": "\n",

  // 启用后，将在保存文件时剪裁尾随空格。
  // "files.trimTrailingWhitespace": false,

  // 启用后，保存文件时在文件末尾插入一个最终新行。
  // "files.insertFinalNewline": false,

  // 控制已更新文件的自动保存。接受的值:“off”、"afterDelay”、"onFocusChange”(编辑器失去焦点)、"onWindowChange”(窗口失去焦点)。如果设置为“afterDelay”，则可在 "files.autoSaveDelay" 中配置延迟。
  // "files.autoSave": "off",

  // 控制延迟(以秒为单位)，在该延迟后将自动保存更新后的文件。仅在 "files.autoSave" 设置为“afterDelay”时适用。
  // "files.autoSaveDelay": 1000,

  // 配置文件路径的 glob 模式以从文件监视排除。更改此设置要求重启。如果在启动时遇到 Code 消耗大量 CPU 时间，则可以排除大型文件夹以减少初始加载。
  // "files.watcherExclude": {
  //   "**/.git/objects/**": true,
  //   "**/.git/subtree-cache/**": true,
  //   "**/node_modules/*/**": true
  // },

  // 控制是否在重启后还原未保存文件。如果启用它，退出编辑器时将不会提示保存。
  "files.hotExit": "onExitAndWindowClose",

// 文件资源管理器(1/9)

  // 控制文件和目录在资源管理器中的排列方式。
  // "explorer.sortOrder": "default",

// 搜索(1/6)

  // 配置 glob 模式以在搜索中排除文件和文件夹。从 files.exclude 设置中继承所有 glob 模式。
  // "search.exclude": {
  //   "**/node_modules": true,
  //   "**/bower_components": true
  // },

// HTTP(0/3)

// 更新(0/1)

// HTML(0/18)

// JSON(0/3)

// Markdown(3/12)

  // 要在 Markdown 预览中使用的 CSS 样式表的 URL 或本地路径列表。相对路径被解释为相对于资源管理器中打开的文件夹。如果没有任何打开的文件夹，则会被解释为相对于 Markdown 文件的位置。所有的 "\" 需写为 "\\"。
  // "markdown.styles": [],

  // 控制 Markdown 预览中使用的字体系列。
  "markdown.preview.fontFamily": "Source Code Pro, 思源黑体",

  // 控制 Markdown 预览中使用的字号(以像素为单位)。
  "markdown.preview.fontSize": 16,

// PHP(0/4)

// TypeScript(1/56)

  // 启用或禁用语法折叠标记。
  "typescript.experimental.syntaxFolding": true,

// 调试(0/6)

// CSS(0/20)

// LESS(0/19)

// SCSS(Sass)(0/19)

// 扩展(0/2)

// 外部终端(2/4)

  // 自定义要启动的终端类型。
  "terminal.explorerKind": "external",
  
  // 自定义要在 Windows 上运行的终端。
  // "terminal.external.windowsExec": "C:\\Program Files\\Git\\bin\\bash.exe",

// 集成终端(12/21)

  // 控制终端在点击右键时进行的操作，可选值为 "default"、 "copyPaste" 和 "selectWord"。选择 "default" 将显示上下文菜单；选择 "copyPaste" 将在有选择内容时进行复制，其他时候进行粘贴；选择 "selectWord" 终端将选择光标下的字并显示上下文菜单。
  "terminal.integrated.rightClickBehavior": "default",

  // 终端在 Linux 上使用的 shell 的路径。
  // "terminal.integrated.shell.linux": "sh",

  // 在 Linux 终端上时要使用的命令行参数。
  // "terminal.integrated.shellArgs.linux": [],

  // 终端在 Windows 上使用的 shell 的路径。使用随 Windows 一起提供的 shell 时(cmd、PowerShell 或 Ubuntu 上的 Bash)，相对 C:\Windows\System32，首选 C:\Windows\sysnative 以使用 64 位版本。
  // 64-bit cmd it available, otherwise 32-bit
  // "terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\cmd.exe",
  // 64-bit PowerShell if available, otherwise 32-bit
  // "terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe",
  // Git Bash
  "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
  // Bash on Ubuntu (on Windows)
  // "terminal.integrated.shell.windows": "C:\\Windows\\sysnative\\bash.exe",

  // 在 Windows 终端上时使用的命令行参数。
  // "terminal.integrated.shellArgs.windows": [],

  // 控制终端的字号(以像素为单位)。
  // "terminal.integrated.fontSize": 14,

  // 控制终端游标是否闪烁。
  "terminal.integrated.cursorBlinking": true,

  // 控制终端游标的样式。
  "terminal.integrated.cursorStyle": "line",

  // 控制终端保持在缓冲区的最大行数。
  // "terminal.integrated.scrollback": 1000,

  // 在存在活动终端会话的情况下，退出时是否要确认。
  "terminal.integrated.confirmOnExit": true,

  // 要添加到 VS Code 进程中的带有环境变量的对象，其会被 Linux 终端使用。
  // "terminal.integrated.env.linux": {},

  // 要添加到 VS Code 进程中的带有环境变量的对象，其会被 Windows 终端使用。
  // "terminal.integrated.env.windows": {},

// 问题预览(2/2)

  // 显示关于文件与文件夹的错误与警告。
  "problems.decorations.enabled": true,

  // 控制问题预览是否应在打开文件时自动显示它们。
  // "problems.autoReveal": true,

// 遥测(2/2)

  // 启用要发送给 Microsoft 的使用情况数据和错误。
  "telemetry.enableTelemetry": false,

  // 启用要发送给 Microsoft 的故障报表。
  // 此选项需重启才可生效。
  "telemetry.enableCrashReporter": false,

// 合并冲突(0/2)

// 默认配置替代(2/6)

  // 针对 [makefile] 语言，配置替代编辑器设置。
  // "[makefile]": {
  //   "editor.insertSpaces": false
  // },

  // 针对 [markdown] 语言，配置替代编辑器设置。
  // "[markdown]": {
  //   "editor.wordWrap": "on",
  //   "editor.quickSuggestions": false
  // },

// Git(6/13)

  // 是否启用了 GIT
  // "git.enabled": true,

  // 可执行 GIT 的路径
  // "git.path": null,

  // 是否已启用自动刷新
  // "git.autorefresh": true,

  // 是否启用了自动提取。
  // "git.autofetch": true,

  // 启用使用 GPG 签名的提交
  // "git.enableCommitSigning": false,

  // 控制 Git 是否向资源管理器和“打开的编辑器”视图添加颜色和小标。
  // "git.decorations.enabled": true,

  // 控制何时显示输入验证输入计数。
  "git.inputValidation": "always",

  // 控制 Git 是否在提交之前检查未保存的文件。
  "git.promptToSaveFilesBeforeCommit": false,

// Java Debugger Configuration(0/1)

  // 
  "java.debug.logLevel": "warn",

// vscode-icons 设置(1/19)

  // 如果设置成 true，关于新的版本消息将不再显示
  "vsicons.dontShowNewVersionMessage": true,

// Java configuration(2/12)

  // Specifies the folder path to the JDK 8 used to launch the Java Language Server.
  // "java.home": null,

  // Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-noverify -Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector
  // "java.jdt.ls.vmargs": "-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication",

// markdownlint configuration(1/1)

  // markdownlint config object
  "markdownlint.config": {
    "default": true,
    "MD004": { "style": "asterisk" },
    "MD007": { "indent": 4 },
    "MD009": { "br_spaces": 2 },
    "MD013": false,
    "MD034": false,
    "MD036": false,
    // 为了方便写博客
    "MD002": false,
    "MD041": false
  }

}